@page "/neworders2"

@using ssAppModels.EFModels
@using Microsoft.EntityFrameworkCore
@using Extensions
@inject ssAppDBContext DbContext

<MudDataGrid @ref="dataGrid2" T="NewOrder" Items="@newOrders2" MultiSelection="true"
             Hideable="true" Groupable="true" GroupExpanded="false" FixedHeader="true"
             Height="700px" GroupClassFunc="GroupClassFunc">

  <ToolBarContent>
    <MudText Typo="Typo.h6" Class="me-4">New Orders  ( @groupCount.ToString("#,##0") )</MudText>
    <MudButton OnClick="@ExpandAllGroups" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Style="padding: 2px 6px; max-height: 22px; font-size: 0.7rem;" Class="me-2">展開する</MudButton>
    <MudButton OnClick="@CollapseAllGroups" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Style="padding: 2px 6px; max-height: 22px; font-size: 0.7rem;">折りたたむ</MudButton>
    <MudSpacer />
  </ToolBarContent>

  <Columns>
    <PropertyColumn Property="x => x.LastOrderDate" Title="Order Date" />
    <PropertyColumn Property="x => x.OrderId" Title="ID" />
    <PropertyColumn Property="x => x.Skucode" Title="Product" />
    <PropertyColumn Property="x => x.Skuabbr" Title="Name" />
    <PropertyColumn Property="x => x.OrderQty" Title="QTY" />

    <PropertyColumn Property="x => x.GroupKey" Title="Inf" Grouping GroupBy="@_groupBy" CellClass="hide-column" HeaderCellClass="hide-column">
      <GroupTemplate>
        <span class="fw-bold me-3">@context.Grouping.Key</span>
        @if (context.Grouping.Count() > 1)
        {
          <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">
            total @context.Grouping.Count()
          </MudChip>
        }
      </GroupTemplate>
    </PropertyColumn>
  </Columns>

</MudDataGrid>

@code {
  private List<NewOrder> newOrders2 = new();
  private MudDataGrid<NewOrder> dataGrid2 = new MudDataGrid<NewOrder>();
  private int groupCount;

  private Func<NewOrder, object> _groupBy = x => x.GroupKey;

  private string GroupClassFunc(GroupDefinition<NewOrder> item)
  {
    return string.Empty;
  }

  protected override async Task OnInitializedAsync()
  {
    var source = await DbContext.DailyOrderNews
        .Where(x => x.Status == "NewOrder")
        .OrderByDescending(x => x.LastOrderDate)
        .ToListAsync();

    newOrders2 = source.Select(x => new NewOrder
      {
        GroupKey = $"{x.LastOrderDate} / {x.ShopCode} / {x.ShipPrefecture} / {x.ShipName} / {(x.PackingId?.Substring(x.PackingId.LastIndexOf('-') + 1) ?? "")}",
        LastOrderDate = x.LastOrderDate,
        OrderId = x.OrderId?.Substring(x.OrderId.LastIndexOf('-') + 1) ?? "",
        Skucode = x.Skucode,
        Skuabbr = x.Skuabbr,
        OrderQty = x.OrderQty
      }).ToList();

    groupCount = source.Select(x => x.PackingId).Distinct().Count();
  }

  private void ExpandAllGroups()
  {
    dataGrid2?.ExpandAllGroups();
  }

  private void CollapseAllGroups()
  {
    dataGrid2?.CollapseAllGroups();
  }
}
